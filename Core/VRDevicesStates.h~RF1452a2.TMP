#pragma once
class VRDevicesStates final
{
    static glm::vec3 ms_hmdPos;
    static glm::quat ms_hmdRot;
    static glm::mat4 ms_hmdMat;

    static glm::vec3 ms_leftHandPos;
    static glm::quat ms_leftHandRot;
    static glm::mat4 ms_leftHandMat;
    static float ms_leftHandPower;

    static glm::vec3 ms_rightHandPos;
    static glm::quat ms_rightHandRot;
    static glm::mat4 ms_rightHandMat;
    static float ms_rightHandPower;

    static float ms_firstTrackerPower();
    static float ms_secondTrackerPower();
    static float ms_thirdTrackerPower();
public:
    enum VRDeviceController : unsigned char
    {
        VDC_LeftController = 0U,
        VDC_RightController
    };
    enum VRDeviceTracker : unsigned char
    {
        VDT_FirstTracker = 0U,
        VDT_SecondTracker,
        VDT_ThirdTracker
    };

    static inline const glm::vec3& GetHmdPosition() { return ms_hmdPos; }
    static inline const glm::quat& GetHmdRotation() { return ms_hmdRot; }
    static inline const glm::mat4& GetHmdMatrix() { return ms_hmdMat; }

    static const glm::vec3& GetControllerPosition(VRDeviceController f_controller);
    static const glm::quat& GetControllerRotation(VRDeviceController f_controller);
    static const glm::mat4& GetControllerMatrix(VRDeviceController f_controller);
    static const float GetControllerPower(VRDeviceController f_controller);

protected:
    static void SetHmdTransformation(const vr::HmdMatrix34_t &f_mat);

    static void SetLeftHandTransformation(const vr::HmdMatrix34_t &f_mat);
    static void SetLeftHandPower(float f_pow);

    static void SetRightHandTransformation(const vr::HmdMatrix34_t &f_mat);
    static void SetRightHandPower(float f_pow);

    static void SetTrackerPower()

    friend class Core;
};
